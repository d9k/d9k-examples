(import 'me.raynes.fs)
exit
(use 'me.raynes.fs)
exit
(use 'me.raynes.fs :rename fs)
(use 'me.raynes.fs :rename fs1)
(require '[me.raynes.fs :as fs])
(fs/*cwd*)
fs/*cwd*
(fs/exists? "~/test.txt")
(fs/exists? "~/_dl")
(fs/exists? "~/mozilla.pdf")
(fs/exists? "/home/d9k/mozilla.pdf")
(fs/absolute? "~/mozilla.pdf")
(fs/absolute? "/home/d9k/mozilla.pdf")
(fs/chdir "~")
(fs/chdir :home)
(fs/absolute-path "~")
(str "a" "-" "b")
(fs/exists? (str fs/home "/mozilla.pdf"))
(str fs/home "/mozilla.pdf")
(str (fs/home) "/mozilla.pdf")
(fs/exists? (str (fs/home) "/mozilla.pdf"))
(fs/exists? (str (fs/home) "/mozilla1.pdf"))
(doc fs/file)
(doc "fs/file")
(doc 'fs/file)
(require ['clojure.repl :as repl])
(require '[clojure.repl :as repl])
(repl/source fs/home)
fs/homedir
homedir
exit
(repl/source fs/home)
(require '[clojure.repl :as repl])
(repl/source fs/home)
(require '[me.raynes.fs :as fs])
(repl/source fs/home)
(fs/chdir "..")
(fs/chdir (fs/home))
(fs/list-dir)
(fs/list-dir fs/*cwd*)
fs/*cwd*
(fs/home)
(fs/chdir (fs/home))
(fs/chdir fs/home)
(fs/chdir (str (fs/home)))
(fs/chdir "/home/d9k")
(fs/chdir "/home/")
(def p "/home/d9k")
p
(fs/chdir p)
(fs/list-dir p)
(fs/list-dir )
exit
(require '[clj-time.core :as time])
(require '[clj-time.coe :as time])
(require '[clj-time.coerce :as coerce])
(time/day-of-week (time/today)
)
(time/day-of-week (time/today))
(require '[clj-time.core :as t])
(t/day-of-week (t/today))
(t/day-of-week ((t/today)))
(t/day-of-week (t/plus (t/today) (t/day 1) ) )
(t/day-of-week (t/plus (t/today) (t/days 1) ) )
(t/day-of-week (t/plus (t/today) (t/days 2) ) )
(t/day-of-week (t/minus (t/today) (t/days 2) ) )
(def a 4)
a
(def today-day (t/day-of-week (t/today)))
today-day
(require '[clj-time.format as df])
(require '[clj-time.format :as df])
(df/show-formatters)
(df/unparse :mysql (t/today))
(df/unparse (df/formatter :mysql) (t/today))
(df/unparse (df/formatter :mysql) (t/date-time))
(def mysql-formatter (df/formatters :mysql))
mysql-formatter
(df/unparse mysql-formatter (t/date-time))
(df/unparse mysql-formatter (t/today))
(df/unparse mysql-formatter (t/date-time 2010 10 3))
(df/unparse :mysql (t/date-time 2010 10 3))
(df/unparse (df/formatter :mysql) (t/today))
(df/unparse (df/formatter :mysql) (t/date-time 2010 10 3))
(df/unparse (df/formatters :mysql) (t/date-time 2010 10 3))
(df/unparse (df/formatters :mysql) (t/today))
(t/today)
t/today
(t/today)
(require '[clj-time.coerce :as dc])
(dc/to-date-time (t/today))
(dc/to-date-time (t/now))
(df/unparse (df/formatters :mysql) (dc/to-date-time (t/now))
)
(df/unparse (df/formatters :mysql) (dc/to-date-time (t/now)) )
exit
