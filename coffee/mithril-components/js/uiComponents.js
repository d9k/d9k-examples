'use strict';

(function () {
  // mithril required
  // store.js is required!

  // https://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
  var M, toCamelCase;

  toCamelCase = function toCamelCase(s) {
    return s.replace(/(\-[a-z])/g, function ($1) {
      return $1.toUpperCase().replace('-', '');
    });
  };

  M = {
    MAX_AUTOGENERATED_COMPONENT_ID: 2048,
    instances: {},
    types: {},
    mountToDom: function mountToDom() {
      var attr, componentType, dataKey, e, element, elementId, elements, i, instanceData, json_data, ref, results, tagName, typeName;
      ref = M.types;
      results = [];
      for (typeName in ref) {
        componentType = ref[typeName];
        tagName = 'component-' + typeName;
        console.log(tagName);
        //# https://stackoverflow.com/a/15342661/1760643
        //elements = document.querySelectorAll('[data-component]');
        elements = document.querySelectorAll(tagName);
        results.push(function () {
          var j, k, l, len, ref1, ref2, ref3, ref4, results1;
          results1 = [];
          for (j = 0, len = elements.length; j < len; j++) {
            element = elements[j];
            if (!((ref1 = element.id) != null ? ref1.length : void 0)) {
              // autogenerate id
              // TODO to separate function
              for (i = k = 1, ref2 = M.MAX_AUTOGENERATED_COMPONENT_ID; 1 <= ref2 ? k <= ref2 : k >= ref2; i = 1 <= ref2 ? ++k : --k) {
                elementId = typeName + i;
                if (M.instances[elementId] == null) {
                  element.id = elementId;
                  break;
                }
              }
              if (!((ref3 = element.id) != null ? ref3.length : void 0)) {
                console.log('Unable to find new elementId for ' + tagName);
                continue;
              }
            }
            json_data = element.getAttribute('data');
            try {
              instanceData = JSON.parse(json_data);
            } catch (error) {
              e = error;
              console.log('Can\'t parse json - ' + json_data + ' - for ' + tagName);
              continue;
            }
            if (instanceData == null) {
              instanceData = {};
            }
            for (i = l = ref4 = element.attributes.length - 1; ref4 <= 0 ? l <= 0 : l >= 0; i = ref4 <= 0 ? ++l : --l) {
              attr = element.attributes[i];
              if (attr.name.match("^data-")) {
                dataKey = toCamelCase(attr.name.substr(5));
                console.log(dataKey);
                //console.log attr.name + ': ' + attr.value
                element.removeAttribute(attr.name);
                try {
                  instanceData[dataKey] = JSON.parse(attr.value);
                } catch (error) {
                  e = error;
                  //console.log 'Can\'t parse json - ' + attr.value + ' - for attr ' + attr.name + ' in  #' + element.id
                  //continue
                  instanceData[dataKey] = attr.value;
                }
              }
            }
            element.setAttribute('data', JSON.stringify(instanceData));
            instanceData.type = typeName;
            M.instances[element.id] = instanceData;
            results1.push(console.log(element.id));
          }
          return results1;
        }());
      }
      return results;
    }
  };

  window.uiComponents = M;
}).call(undefined);